(begin-tx)
(env-data
 { 'util-ns-users: ["util-ns-user"]
 , 'util-ns-admin: ["util-ns-admin"]
 })
(env-keys ["util-ns-user", "util-ns-admin"])

(load "../util/ns.pact")
(load "../util/guards.pact")
(load "../util/guards1.pact")
(commit-tx)

(begin-tx)
(env-data
 { 'ns-admin-keyset: ["admin"]
 , 'ns-operate-keyset: ["operate"]
 , 'ns-init-keyset: { "keys": [], "pred": "="} })
(load "../root/fungible-v2.pact")
(load "../root/coin.pact")
(load "../root/ns.pact")

(env-data
  { 'dao-ns-user: { "keys": [], "pred": "="}
  , 'dao-ns-admin: ["dao-admin"]
  , 'dao-ns: "dao"
  , 'upgrade: false
  })
(env-keys ["operate", "dao-admin"])

(load "init-ns.pact")

(env-data { 'dao-ns: "dao" })
(env-chain-data
  {"block-height": 1675409
  ,"block-time": (time "2021-05-30T12:00:00Z")
  ,"chain-id": "0"
  ,"gas-limit": 10000000
  ,"gas-price": 0.0
  ,"prev-block-hash": ""
  ,"sender": ""})
(load "init.pact")
(typecheck "dao.init" true)

; Check init State
(coin.details DAO_ACCT_NAME)
(use dao.init)
(view-state)
(view-guardians)
(view-ambassadors)
(is-dao-frozen)
(commit-tx)

(begin-tx)
(load "tests/populate-users.repl")
(use dao.init)

; -----------------------------------------------------------------------------
; basic guardian functionality tests
; -----------------------------------------------------------------------------
(env-sigs [
  { 'key: 'guardian0
  , 'caps:
      [(coin.TRANSFER 'guardian0 DAO_ACCT_NAME GUARDIAN_KDA_REQUIRED)
       (GUARDIAN 'guardian0)]}
  { 'key: 'guardian1
  , 'caps:
      [(coin.TRANSFER 'guardian1 DAO_ACCT_NAME GUARDIAN_KDA_REQUIRED)
       (GUARDIAN 'guardian1)]}
  { 'key: 'guardian2
  , 'caps:
      [(coin.TRANSFER 'guardian2 DAO_ACCT_NAME GUARDIAN_KDA_REQUIRED)]}
  ])
(register-guardian 'guardian0 (read-keyset 'guardian0))

; quickly poke at the just-one and just-two guardian scenarios
(propose-dao-upgrade 'guardian0 "pwOa2NBxVO0wtVt7Xt2oeJOUkBYML_URtZnDHHK6AJA")
(expect-failure "proposal is too new"
  "Proposal still in cooldown"
  (check-hash-approval "pwOa2NBxVO0wtVt7Xt2oeJOUkBYML_URtZnDHHK6AJA"))
(env-chain-data
  {"block-time": (time "2021-06-01T12:00:00Z")})
;(expect-failure "approvals still in cooldown (but now 1 of 3)"
(expect "1 of 1 allows for upgrade"
  true
  (check-hash-approval "pwOa2NBxVO0wtVt7Xt2oeJOUkBYML_URtZnDHHK6AJA"))
(register-guardian 'guardian1 (read-keyset 'guardian1 ))
(expect-failure "50% vote"
  "Upgrade not approved, 1 of 2"
  (check-hash-approval "pwOa2NBxVO0wtVt7Xt2oeJOUkBYML_URtZnDHHK6AJA"))

(register-guardian 'guardian2 (read-keyset 'guardian2))

(expect "3 guardians" 3 (at 'guardian-count (view-state)))
(expect "DAO has right balance" (* 3 GUARDIAN_KDA_REQUIRED) (dao-acct-balance))
(expect-failure "cannot unregister guardians"
  "init needs to be upgraded to enable withdrawls"
  (unregister-guardian 'guardian1))

(env-sigs [
  { 'key: 'bob
  , 'caps:
      [(coin.TRANSFER 'bob DAO_ACCT_NAME GUARDIAN_KDA_REQUIRED)]
  }])
(expect-failure "insufficient funds for guardianship"
  "Insufficient funds"
  (register-guardian 'bob (read-keyset 'bob)))
(view-guardians)

; -----------------------------------------------------------------------------
; basic ambassador functionality tests
; -----------------------------------------------------------------------------

(env-sigs [
  { 'key: 'guardian0
  , 'caps:[(GUARDIAN 'guardian0)]}
  { 'key: 'bob
  , 'caps:[(GUARDIAN 'bob)]}
  { 'key: 'ambassador0
  , 'caps:[(GUARDIAN 'ambassador0)]}
  ])
(register-ambassador 'guardian0 'ambassador0 (read-keyset 'ambassador0))
(expect-failure "unauthorized access"
  "with-read: row not found: bob"
  (register-ambassador 'bob 'ambassador1 (read-keyset 'ambassador1 )))
(expect-failure "unauthorized access"
  "with-read: row not found: ambassador0"
  (register-ambassador 'ambassador0 'ambassador1 (read-keyset 'ambassador1 )))

(register-ambassador 'guardian0 'ambassador1 (read-keyset 'ambassador1))
(register-ambassador 'guardian0 'ambassador2 (read-keyset 'ambassador2))
(register-ambassador 'guardian0 'ambassador3 (read-keyset 'ambassador3))
(expect "4 ambassadors" 4 (at 'ambassador-count (view-state)))

(deactivate-ambassador 'guardian0 'ambassador3)
(expect "3 ambassadors" 3 (at 'ambassador-count (view-state)))

(expect-failure "cooldown triggered"
  "Deactivate Cooldown Failure"
  (deactivate-ambassador 'guardian0 'ambassador2))
(env-chain-data
  {"block-time": (add-time
      (at 'last-ambassador-deactivation (view-state))
      (+ DEACTIVATE_COOLDOWN (days 1)))})
(expect "cooldown triggered" true (deactivate-ambassador 'guardian0 'ambassador2))

(reactivate-ambassador 'guardian0 'ambassador2)
(commit-tx)

; ----
; is-ambassador, is-guardian and rotate-abm/grd tests
(begin-tx)
(use dao.init)
(env-data {
  'guardian0: ["guardian0"],
  'guardian0b: ["guardian0b"],
  'ambassador0: ["ambassador0"],
  'ambassador0b: ["ambassador0b"]
  })
(env-sigs [
  { 'key: 'guardian0
  , 'caps:[(GUARDIAN 'guardian0) ]},
  { 'key: 'guardian0b
  , 'caps:[(GUARDIAN 'guardian0) ]},
  { 'key: 'ambassador0
  , 'caps:[(AMBASSADOR 'ambassador0)]},
  { 'key: 'ambassador0b
  , 'caps:[(AMBASSADOR 'ambassador0)]},
  { 'key: 'ambassador2
  , 'caps:[(AMBASSADOR 'ambassador2)]}
  ])
(is-ambassador 'ambassador2)
(env-chain-data
  {"block-time": (add-time
      (at 'last-ambassador-deactivation (view-state))
      (+ DEACTIVATE_COOLDOWN (days 1)))})
(deactivate-ambassador 'guardian0 'ambassador2)
(expect-failure "fails for not active ambs"
  "Ambassador 'ambassador2' is not active"
  (is-ambassador 'ambassador2 ))

(expect-failure
  "must sign to prove you're an ambassador"
  "Keyset failure (keys-all): [ambassad...]" (is-ambassador 'ambassador3 ))
(expect-failure
  "must be in ambassador table"
  "with-read: row not found: guardian0" (is-ambassador 'guardian0 ))

(is-guardian 'guardian0)
(expect-failure
  "must sign to prove you're an ambassador"
  "Keyset failure (keys-all): [guardian...]" (is-guardian 'guardian1))
(expect-failure
  "must be in ambassador table"
  "with-read: row not found: ambassador0" (is-guardian 'ambassador0 ))

(rotate-guardian 'guardian0 (read-keyset 'guardian0b))
(expect-failure
  "must pass existing guard to rotate"
  "Keyset failure (keys-all): [guardian...]"
  (rotate-guardian 'guardian1 (read-keyset 'guardian0)))
(rotate-ambassador 'ambassador0 (read-keyset 'ambassador0b))
(expect-failure
  "must pass existing guard to rotate"
  "Keyset failure (keys-all): [ambassad...]"
  (rotate-ambassador 'ambassador1 (read-keyset 'ambassador0)))


(rollback-tx)

; -----------------------------------------------------------------------------
; freezer tests
; -----------------------------------------------------------------------------
(begin-tx)
(use dao.init)
(env-sigs [
  { 'key: 'ambassador0
  , 'caps:[(AMBASSADOR 'ambassador0)]},
  { 'key: 'ambassador1
  , 'caps:[(AMBASSADOR 'ambassador1)]},
  { 'key: 'ambassador2
  , 'caps:[(AMBASSADOR 'ambassador2)]}
  ])
(env-chain-data
  {"block-time": (time "2021-07-01T12:00:00Z")})

(vote-to-freeze 'ambassador0)
(expect-failure "insufficent votes"
  "Majority vote failed: 1 of 3"
  (freeze 'ambassador0))
(expect "not frozen" false (is-dao-frozen))

(vote-to-freeze 'ambassador1)
(freeze 'ambassador0)
(expect-failure "DAO is frozen"
  "DAO is Frozen"
  (is-dao-frozen))

; roll forward to the edge of the boundry
(env-chain-data
  {"block-time": (time "2021-07-08T11:59:59Z")})
(expect-failure "bounds check"
  "DAO is Frozen"
  (is-dao-frozen))
(expect-failure "freeze votes are timed out"
  "Majority vote failed: 0 of 3"
  (freeze 'ambassador0))

; check that ambassadors can't refreeze while frozen
(vote-to-freeze 'ambassador0)
(vote-to-freeze 'ambassador1)
(expect-failure "cannot freeze a frozen DAO"
  "DAO is Frozen"
  (freeze 'ambassador0))

; check that freeze aborts GOVERNANCE
(expect-failure "GOVERNANCE cap is frozen"
  "DAO is Frozen"
  (read state DAO_STATE_KEY))

; roll forward the first second that the DAO is unfrozen
(env-chain-data
  {"block-time": (time "2021-07-08T12:00:01Z")})
(expect "DAO is not frozen" false (is-dao-frozen))

; -----------------------------------------------------------------------------
; proposal tests
; -----------------------------------------------------------------------------

(env-sigs [
  { 'key: 'guardian0
  , 'caps:[(GUARDIAN 'guardian0)]}
  { 'key: 'guardian1
  , 'caps:[(GUARDIAN 'guardian1)]}
  ])
(propose-dao-upgrade 'guardian0 "DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g")
(expect-failure "approvals still in cooldown"
  (check-hash-approval "DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g"))
(env-chain-data
  {"block-time": (time "2021-07-09T12:00:01Z")})
(expect-failure "approvals still in cooldown (but now 1 of 3)"
  "Upgrade not approved, 1 of 3 for DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g"
  (check-hash-approval "DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g"))
(expect-failure "wrong hash"
  "Upgrade hash mismatch: DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g vs foo"
  (guardian-approve-hash 'guardian1 "foo"))
(guardian-approve-hash 'guardian1 "DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g")
(check-hash-approval "DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g")
(commit-tx)

(begin-tx)
(env-chain-data
  {"block-time": (time "2021-07-11T12:00:01Z")})
(expect-failure "bounds check on upgrades"
  "Proposal has timed out"
  (dao.init.check-hash-approval "DldRwCblQ7Loqy6wYJnaodHl30d3j3eH-qtFzfEv46g"))
(rollback-tx)

; Check that upgrade can happen w/ only governance approval
(begin-tx)
(env-data { 'dao-ns: "dao" })
(namespace (read-msg 'dao-ns ))
(env-chain-data
  {"block-height": 1675410
  ,"block-time": (time "2021-07-09T12:00:01Z")
  ,"chain-id": "0"
  ,"gas-limit": 10000000
  ,"gas-price": 0.0
  ,"prev-block-hash": ""
  ,"sender": ""})

(module init EMPTY
  (defcap EMPTY () (enforce false "empty module for testing")))
(rollback-tx)
